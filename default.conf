# Will only be used if asked for a SIM PIN, you can leave empty if not needed
sim_pin=

[pdp_context]
# [IP-IPV6-PPP]
pdp_type=IP
pdp_apn=internet
pdp_username=
pdp_password=
# [0-1-2] (0: no authentication, 1: PAP (Empty:default), 2: CHAP)
pdp_authentication_type=

[serial]
# [300-1200-2400-4800-9600-19200-38400-57600-115200]
serial_baud=115200
# [start bit 7-8][parity N-E-O][stop bit 0-1]
serial_param=8N1
# [bool] after connection is established: if false: will send serial data buffered during downtime
serial_clear_buffer_after_connect=true
# [bool] on exiting AT bridge: if false: will send serial data buffered during AT bridge mode
serial_clear_buffer_after_at_bridge=true
# [python string] enclosed in single or double quotes, accepts escape characters
# This string will be send to the serial port after connecting to the gsm network
# Magic keywords: {yy}, {MM}, {dd}, {hh}, {mm}, {ss}
serial_magic=

[servers]
# ip:port OR ip:port:[tcp-udp], no brackets (TCP is default)
# Servers are comma separated, will try connecting in the given order
servers=192.186.1.0:80
# [0..n] in seconds (0: disabled), period to sleep before retrying all servers again
servers_retry_wait=20
# [bool] after disconnect: if true : will retry before sleep
#                             false: will sleep before retrying
servers_retry_immediately=true

[socket]
# [0..240] TCP keep alive in minutes (0 to disable)
socket_keep_alive=2
# [0..65535] in seconds (0: no timeout)
# If there is no data exchange within this timeout period the connection will be closed
socket_inactivity_timeout=0
# [10..1200] in 100ms, duration to wait to establish a connection
# Warning: Beyond the 3 seconds mark, the Telit module does multiple requests to establish a connection;
#          therefore it is better to play with `servers_retry_wait` rather than increasing this value
#          to keep data usage and power consumption low
socket_connection_timeout=25
# [1..1500] packet size in bytes for the TCP/IP stack
# Pending data will automatically be sent if it reaches packet size
socket_packet_size=1360
# [0..255] in 100ms (0: no timeout)
# After this period pending data are also sent even if theyâ€™re less than packet size
socket_tx_timeout=10
# [0..255] ascii decimal (Empty: disabled)
# On the reception of this char, pending data is flushed to the socket
socket_flush_char=
# [0..n] in seconds (0: no timeout)
# AT bridge inactivity timeout, you can enter and exit AT bridge mode with sending +++
at_bridge_timeout=120
# [python string] enclosed in single or double quotes, accepts escape characters
# This string will be send to the server after a new connection is established
# Magic keywords: {imei}, {msisdn}, {imsi}, {iccid}, {operator}, {cell}, {csq}, {downtime}, {disconnection},
#                 {power_uptime}, {session_uptime}, {gdatavol_total}, {gdatavol_session}
connection_message='{"imei":"{imei}"}\r\n'
# [1..7] for {cell} magic (AT#MONI)
cell_info_count=7

[low-power]
# [0..100] in 100ms, sleep period used during the active connection
# Increase for more low power but a slower response time
# Note: This doesn't have much of an effect in the current consumption, maybe when used together
#       with `power_saving` enabled it could be worth it
low_power_mode=1
# [bool] Experimental: this is AT+CFUN=0, RTS must be connected
power_saving=false

[reliability]
# [0..n] in minutes (0: disabled)
# Reset the module if is not unable to connect to any server before the timeout
downtime_reset=0
# [0..11000] in minutes (0: disabled)
# This is a hard reset, it can happen during an active communication
periodic_reset=0
# [bool] resets the periodic reset timeout on a new connection
periodic_reset_renew_on_connect=false

[debug]
# [bool] adds all AT commands communication between the Telit module to trace
verbose_trace=false

END

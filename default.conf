sim_pin=

[pdp_context]
# "IP", "IPV6", "PPP"
pdp_type=IP
pdp_apn=internet
pdp_username=
pdp_password=
# 0: no authentication, 1: PAP(default), 2: CHAP
pdp_authentication_type=

[serial]
# [300-1200-2400-4800-9600-19200-38400-57600-115200]
serial_baud=115200
# [start bit 7-8][parity N,E,O][stop bit 0-1]
serial_param=8N1
serial_clear_buffer_after_connect=true
serial_clear_buffer_after_at_bridge=true
# A python string, enclosed in single or double quotes, accepts escape characters
# Magic keywords: {yy}, {MM}, {dd}, {hh}, {mm}, {ss}
# This string will be send to the serial port, after connecting to the gsm network
serial_magic=

[servers]
# ip:port OR ip:port:[tcp-udp], no brackets (TCP is default)
# servers are comma separated, will try connecting in the given order
servers=192.186.1.0:80
# [0..n] in seconds (0: disabled), period to sleep before retrying all servers again
servers_retry_wait=20
# [bool] After disconnect: If true : will retry before sleep
#                             false: will sleep before retrying
servers_retry_immediately=true

[socket]
# [0..240] Tcp keep alive in minutes (0 to disable)
socket_keep_alive=2
# [0..65535] in seconds (0: no timeout)
# If there is no data exchange within this timeout period the connection will be closed
socket_inactivity_timeout=0
# [10..1200] in 100ms, duration to wait to establish a connection
socket_connection_timeout=25
# [1..1500] packet size in bytes for the tcp/ip stack
# Pending data will automatically be sent if it reaches packet size
socket_packet_size=1360
# [0..255] in 100ms (0: no timeout)
# After this period pending data are also sent even if theyâ€™re less than packet size
socket_tx_timeout=10
# [0..255] ascii decimal (Empty: disabled). This flushes pending data to the socket
socket_flush_char=
# [0..n] in seconds (0: no timeout). Inactivity timeout, you can enter and exit at mode with +++
at_bridge_timeout=120
# A python string, enclosed in single or double quotes, accepts escape characters
# Magic keywords: {imei}, {msisdn}, {imsi}, {iccid}, {cell}, {csq}, {power_uptime}, {session_uptime},
#                 {gdatavol_total}, {gdatavol_session}, {disconnection}, {downtime}
connection_message='{"imei":"{imei}"}\r\n'
# [1..7] for {cell} magic (AT#MONI)
cell_info_count=7

[low-power]
# [0..100] Increase for more low power but a slower response time. This is a value used for the
# sleep period equaling low_power_mode*100ms. Note: This doesn't have much of an effect in the
# current consumption, maybe when used with power_saving it could be worth it
low_power_mode=1
# Experimental: this is AT+CFUN=0, RTS must be connected
power_saving=false

[reliability]
# [0..n] in minutes (0: disabled)
# Reset the module if is not unable to connect to any server before the timeout
downtime_reset=0
# [0..11000] in minutes (0: disabled)
# This is a hard reset, it can happen during an active communication
periodic_reset=0
# Resets the periodic reset timeout on a new connection
periodic_reset_renew_on_connect=false

[debug]
verbose_trace=false

END
